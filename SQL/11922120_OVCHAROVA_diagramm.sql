--CREATE TABLES
CREATE TABLE Benutzer(
 LoginID NUMBER GENERATED BY DEFAULT AS IDENTITY,
 User_Vorname VARCHAR(30),
 User_Nachname VARCHAR(30) NOT NULL,
 Email VARCHAR(100) NOT NULL UNIQUE CHECK(Email LIKE '%@%'),
 Telefon VARCHAR(20) NOT NULL,
CONSTRAINT pk_Benutzer PRIMARY KEY (LoginID)
);

CREATE TABLE Angestellter(
 JobID NUMBER GENERATED BY DEFAULT AS IDENTITY,
 SozNr NUMBER NOT NULL UNIQUE,
 Ang_Vorname VARCHAR(30),
 Ang_Nachname VARCHAR(30) NOT NULL,
 Gehalt DECIMAL(30,2) DEFAULT '1000',
 Wohnort VARCHAR(30) NOT NULL,
CONSTRAINT pk_Angestellter PRIMARY KEY(JobID)
);

CREATE TABLE Spediteur(
AutoID NUMBER GENERATED BY DEFAULT AS IDENTITY,
Lieferdatum DATE,
JobID_Angestellter NUMBER,
CONSTRAINT pk_Spediteur PRIMARY KEY (AutoID),
CONSTRAINT fk_Spediteur FOREIGN KEY(JobID_Angestellter) REFERENCES Angestellter(JobID)
);

CREATE TABLE Verkaeufer(
ShopID NUMBER GENERATED BY DEFAULT AS IDENTITY,
JobID_Angestellter NUMBER,
CONSTRAINT pk_Verkaeufer PRIMARY KEY (ShopID),
CONSTRAINT fk_Verkaeufer FOREIGN KEY (JobID_Angestellter) REFERENCES Angestellter(JobID)
);

CREATE TABLE Bestellung(
BestellNr NUMBER GENERATED BY DEFAULT AS IDENTITY,
LoginID_Benutzer NUMBER,
AutoID_Spediteur NUMBER,
Gesamtpreis DECIMAL(30,2) NOT NULL,
Bestellungsdatum DATE,
Status VARCHAR(20),
Land VARCHAR(30) NOT NULL,
Stadt VARCHAR(50) NOT NULL,
Strasse VARCHAR(80) NOT NULL,
PLZ VARCHAR(10) NOT NULL,
CONSTRAINT pk_Bestellung PRIMARY KEY (BestellNr),
CONSTRAINT fk1_Bestellung FOREIGN KEY (LoginID_Benutzer) REFERENCES Benutzer(LoginID),
CONSTRAINT fk2_Bestellung FOREIGN KEY (AutoID_Spediteur) REFERENCES Spediteur(AutoID)
);

CREATE TABLE Zahlung(
ZahlungsID NUMBER GENERATED BY DEFAULT AS IDENTITY,
BestellNr_Bestellung NUMBER,
Betrag DECIMAL(30, 2) NOT NULL CHECK(Betrag > 0),
Zahlungsmethode VARCHAR(50) NOT NULL
CHECK (Zahlungsmethode IN ('Bar', 'Kreditkarte', 'PayPal')),
CONSTRAINT fk_Zahlung FOREIGN KEY (BestellNr_Bestellung) REFERENCES Bestellung(BestellNr),
CONSTRAINT pk_Zahlung PRIMARY KEY(ZahlungsID, BestellNr_Bestellung )
);

CREATE TABLE Artikel(
ArtikelNr NUMBER GENERATED BY DEFAULT AS IDENTITY,
BestellNr_Bestellung NUMBER,
ShopID_Verkaeufer NUMBER,
Art_Name VARCHAR(100) NOT NULL,
Bezeichnung VARCHAR(100),
Preis DECIMAL(30,2) NOT NULL CHECK(Preis > 0),
Groesse FLOAT NOT NULL,
Gewicht FLOAT NOT NULL,
CONSTRAINT pk_Artikel PRIMARY KEY (ArtikelNr),
CONSTRAINT fk1_Artikel FOREIGN KEY (BestellNr_Bestellung) REFERENCES Bestellung(BestellNr),
CONSTRAINT fk2_Artikel FOREIGN KEY (ShopID_Verkaeufer) REFERENCES Verkaeufer(ShopID)
);

CREATE TABLE waehlt(
LoginID_Benutzer NUMBER,
ArtikelNr_Artikel NUMBER,
CONSTRAINT pk_Waehlt PRIMARY KEY(LoginID_Benutzer, ArtikelNr_Artikel),
CONSTRAINT fk1_Waehlt FOREIGN KEY (ArtikelNr_ArtikeL) REFERENCES Benutzer(LoginID),
CONSTRAINT fk2_Waehlt FOREIGN KEY (LoginID_Benutzer) REFERENCES Artikel(ArtikelNr)
);

CREATE TABLE leitet(
 JobID1_Angestellter NUMBER,
 JobID2_Angestellter NUMBER,
 CONSTRAINT pk_Leiter PRIMARY KEY(JobID1_Angestellter, JobID2_Angestellter),
 CONSTRAINT fk1_Leitet FOREIGN KEY (JobID1_Angestellter) REFERENCES Angestellter(JobID),
 CONSTRAINT fk2_Leitet FOREIGN KEY (JobID2_Angestellter) REFERENCES Angestellter(JobID)
);

--CREATE VIEWS
CREATE OR REPLACE VIEW super_clients AS
 SELECT ZahlungsID, betrag
 FROM ZAHLUNG
 GROUP BY ZahlungsID, betrag
 HAVING betrag>500
 ORDER BY ZahlungsID, betrag;

SELECT * FROM super_clients;

CREATE OR REPLACE VIEW avg_order_price AS
SELECT AVG(Bestellung.Gesamtpreis) as average_order_price, Benutzer.LoginID
FROM Bestellung
INNER JOIN Benutzer
ON bestellung.loginid_benutzer = Benutzer.LoginID
GROUP BY Benutzer.LoginID;

SELECT * FROM avg_order_price;


--CREATING SEQUENCE 

CREATE SEQUENCE increment_ArtikelNr
 MINVALUE 110;
 START WITH 111;
 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trig_artikelInsert
    BEFORE INSERT 
        ON Artikel
        FOR EACH ROW
BEGIN
    SELECT increment_ArtikelNr.NEXTVAL
    INTO :NEW.ArtikelNr
    FROM dual;
END;
/